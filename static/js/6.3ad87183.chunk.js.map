{"version":3,"sources":["actions/GameActions.js","containers/GameDetail.js","actions/VideoAction.js","utils/apiCaller.js","utils/setMetacriticColor.js","components/FullVideo.js"],"names":["fetchGameDetaiSuccess","data","keygame","imgScreenshots","type","FETCH_GAME_DETAIL_SUCCESS","payload","dayjs","extend","localizedFormat","relativeTime","connect","state","gameDetail","collectionGamesDetail","loading","videoId","actionVideo","fetchGamesDetail","API_URL","dispatch","a","FETCH_GAME_DETAIL","fetchData","linkScreenshots","id","results","console","log","getIdVideo","idVideo","openVideo","match","LinkDetailGame","url","nameGameDetail","params","slug","useEffect","releasedDate","released","format","fromNow","Loading","className","style","backgroundImage","background_image","zIndex","clip","onClick","video","name","setMetacriticColor","metacritic","genres","map","item","index","to","textDecoration","href","website","target","ReactHtmlParser","description","Object","keys","alt","src","image","tags","FullVideo","OPEN_VIDEO","closeVideo","CLOSE_VIDEO","axios","request","method","num","color","closeFullVideo","width","height","frameBorder","allowFullScreen","allow","title"],"mappings":"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","file":"static/js/6.3ad87183.chunk.js","sourcesContent":["import {\r\n  FETCH_GAME_DETAIL,\r\n  FETCH_GAME_DETAIL_SUCCESS,\r\n} from \"../const/ActionTypes\";\r\nimport  {fetchData}  from '../utils/apiCaller';\r\n// đang cần làm gì? lấy data\r\nexport const fetchGameDetaiRequest = () => {\r\n  return {\r\n    type: FETCH_GAME_DETAIL\r\n  }\r\n}\r\n\r\n// lấy những cái nào trong data? đẩy lên reduces\r\nexport const fetchGameDetaiSuccess = (data,keygame,imgScreenshots) => {\r\n  return {\r\n      type: FETCH_GAME_DETAIL_SUCCESS,\r\n      payload: {data,keygame,imgScreenshots}\r\n  }\r\n}\r\n\r\nexport const fetchGamesDetail = (API_URL,keygame) => async (dispatch) => {\r\n  try {\r\n    //gửi yêu cầu sẽ lấy api chuẩn bị đổ vào reducers\r\n      await dispatch(fetchGameDetaiRequest());\r\n      const data = await fetchData(API_URL);\r\n      const linkScreenshots = `https://api.rawg.io/api/games/${data.id}/screenshots?page_size=20`\r\n      const imgScreenshots = await fetchData(linkScreenshots);\r\n      // console.log(imgScreenshots.results)\r\n      await dispatch(fetchGameDetaiSuccess(data,keygame,imgScreenshots.results));\r\n  } catch (err) {\r\n    console.log('fetchGenre error', err);\r\n  }\r\n};\r\n\r\n\r\n","import React, { Fragment, useEffect } from 'react'\r\nimport { AiOutlinePlusCircle, AiTwotoneLike } from 'react-icons/ai';\r\nimport { FaPlay } from 'react-icons/fa';\r\nimport { connect } from 'react-redux'\r\nimport {fetchGamesDetail} from '../actions/GameActions'\r\nimport setMetacriticColor from '../utils/setMetacriticColor'\r\nimport Loading from '../components/Loading'\r\nimport { Link } from 'react-router-dom';\r\nimport {openVideo} from '../actions/VideoAction'\r\nimport FullVideo from '../components/FullVideo';\r\nimport ReactHtmlParser from 'react-html-parser'; \r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\r\n\r\ndayjs.extend(localizedFormat);\r\ndayjs.extend(relativeTime);\r\n\r\nconst GameDetail = ({gameDetail,fetchGamesDetail,match,loading,getIdVideo,videoId}) => {  \r\n  const LinkDetailGame = `https://api.rawg.io/api${match.url}`;\r\n  const nameGameDetail = match.params.slug\r\n\r\n  useEffect(() => {\r\n    fetchGamesDetail(LinkDetailGame,nameGameDetail)\r\n  }, [fetchGamesDetail,LinkDetailGame,nameGameDetail])\r\n\r\n  const openFullVideo = () => {\r\n    getIdVideo(gameDetail[nameGameDetail][0].clip.video)\r\n  }\r\n  const releasedDate = gameDetail && gameDetail[nameGameDetail] && `${dayjs(gameDetail[nameGameDetail][0].released).format('ll')} (${dayjs(\r\n    gameDetail[nameGameDetail][0].released\r\n  ).fromNow()})`;\r\n  return (\r\n    <>\r\n    {loading?<Loading/>:gameDetail && gameDetail[nameGameDetail] &&\r\n    <div className=\"game\">\r\n      <div className=\"deep\">\r\n        <div className=\"game__back-art\" style={{backgroundImage: `linear-gradient(rgba(15, 15, 15, 0.7), rgb(21, 21, 21)), linear-gradient(rgba(21, 21, 21, 0.8), rgba(21, 21, 21, 0.5)),url(\"${gameDetail[nameGameDetail][0].background_image}\")`, zIndex: 1}} />\r\n      </div>\r\n      <div className=\"game__main\">\r\n        <div>\r\n          <div className=\"game__art\" style={{backgroundImage: `url(\"${gameDetail[nameGameDetail][0].background_image}\")`}} />\r\n          {gameDetail[nameGameDetail][0].clip && <li className=\"game__trailer\" onClick={openFullVideo}>\r\n            <FaPlay />\r\n            <span>Play trailer</span>\r\n          </li>}\r\n          <ul className=\"game__actions\">\r\n            <li className=\"btn game__action game__action--like\">\r\n              <AiTwotoneLike/>\r\n              <span>Like</span>\r\n            </li>\r\n            <li className=\"btn game__action\">\r\n              <AiOutlinePlusCircle/>\r\n              <span>Collection</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"game__content\">\r\n          <h2 className=\"game__name\">{gameDetail[nameGameDetail][0].name}</h2>\r\n          <span className=\"game__alternative-names\" />\r\n          <h3 className=\"heading-3\">\r\n            Released Date\r\n            <p className=\"game__released\">{releasedDate}</p>\r\n          </h3>\r\n          <span className={`game__meta ${setMetacriticColor(gameDetail[nameGameDetail][0].metacritic)}`}>{gameDetail[nameGameDetail][0].metacritic||0}</span>\r\n          <h3 className=\"heading-3\">\r\n            Genres\r\n            <div className=\"game__genres\">\r\n              {gameDetail[nameGameDetail][0].genres.map((item,index)=>\r\n              <Fragment key={item.id}>\r\n                {index !== 0 && ', '}\r\n                <Link className=\"game__genre\" to={`/games?genre=${item.slug}`} style={{textDecoration: 'none'}}>{item.name}</Link>\r\n              </Fragment>\r\n              )}\r\n            </div>\r\n          </h3>\r\n          <h3 className=\"heading-3\">\r\n            Homepage\r\n            <p className=\"game__homepage\"><a href={gameDetail[nameGameDetail][0].website} target=\"blank\">{gameDetail[nameGameDetail][0].website}</a></p>\r\n          </h3>\r\n          <h3 className=\"heading-3\">\r\n            Description\r\n            <div className=\"game__description\">\r\n              {ReactHtmlParser(gameDetail[nameGameDetail][0].description)}\r\n              <span className=\"heading-3 game__show-more\">read more</span>\r\n            </div>\r\n          </h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"game__sub\">\r\n        <div className=\"left\">\r\n          <div className=\"game__images\">\r\n            {Object.keys(gameDetail[nameGameDetail][1]).map((item,index)=>\r\n            <img className=\"game__image\" key={index} alt={gameDetail[nameGameDetail][1][item].id} src={gameDetail[nameGameDetail][1][item].image} />\r\n            )}\r\n            </div>\r\n        </div>\r\n        <div className=\"right\">\r\n          <h3 className=\"heading-3\">\r\n            Tags\r\n            <div className=\"game__tags\">\r\n              {gameDetail[nameGameDetail][0].tags.map(\r\n                item => <Link className=\"game__tag\" key={item.id} to={`/games?tag=${item.slug}`} style={{textDecoration: 'none'}}>{item.name}</Link>\r\n              )}\r\n            </div>\r\n          </h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"footer\">Power by RAWG</div>\r\n    </div>\r\n      } \r\n    {videoId && <FullVideo videoId={videoId}/>}\r\n    </>\r\n  )\r\n}\r\nconst mapStateToProps = state => {\r\n  // call data games từ store đặt tên là listGames\r\n  // collectionGame là tên bí danh đăt ở reducers/index\r\n  return { \r\n    gameDetail: state.collectionGamesDetail.data,\r\n    loading: state.collectionGamesDetail.loading,\r\n    videoId: state.actionVideo.videoId,\r\n  }\r\n}\r\nconst getIdVideo = (idVideo) => async (dispatch) => {\r\n  await dispatch(openVideo(idVideo))\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchGamesDetail,getIdVideo})(GameDetail);\r\n","import \r\n{OPEN_VIDEO,\r\nCLOSE_VIDEO\r\n}\r\nfrom '../const/ActionTypes'\r\n\r\nexport const openVideo = (videoId) => {\r\n  return {\r\n    type: OPEN_VIDEO,\r\n    payload: videoId\r\n  }\r\n}\r\nexport const closeVideo = () => {\r\n  return {\r\n    type: CLOSE_VIDEO\r\n  }\r\n}","import axios from 'axios';\r\nexport const fetchData = async (API_URL) => {\r\n  try{\r\n    const {data} =  await axios.request({\r\n      method: 'GET',\r\n      url: API_URL\r\n    })\r\n    return data; \r\n  }catch(error) {\r\n    console.log(error);\r\n  };\r\n};\r\n\r\n\r\n","export default function setMetacriticColor(num) {\r\n\r\n  let color = 'metacritic-';\r\n  if (num >= 75) {\r\n    color += 'green';\r\n  } else if (num >= 50) {\r\n    color += 'yellow';\r\n  } else if (num >= 25) {\r\n    color += 'blue';\r\n  } else {\r\n    color += 'red';\r\n  }\r\n\r\n  return color;\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {closeVideo} from '../actions/VideoAction'\r\n\r\nfunction FullVideo({videoId,closeFullVideo}) {\r\n  const onClose = () => {\r\n    closeFullVideo()\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"full-video\">\r\n        <span className=\"full-video__close\" onClick={onClose}>\r\n          &times;\r\n        </span>\r\n        <div className=\"full-video__frame\">\r\n          <iframe\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            frameBorder=\"0\"\r\n            allowFullScreen\r\n            allow=\"accelerometer; autoplay; encrypted-media; picture-in-picture\"\r\n            title=\"Youtube video player\"\r\n            src={`https://www.youtube.com/embed/${videoId}?autoplay=1`}\r\n          ></iframe>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // chuyển dữ liệu từ \r\n    closeFullVideo: () => {dispatch(closeVideo())},\r\n  }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(FullVideo)\r\n"],"sourceRoot":""}